<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-3.0.4.xsd ">




    <sec:http entry-point-ref="casAuthenticationEntryPoint">
        <sec:intercept-url pattern="/images/**" filters="none" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <sec:intercept-url pattern="/themes/**" filters="none"/>
        <sec:intercept-url pattern="/programCreationRest" filters="none"/>
        <sec:intercept-url pattern="/**" access="ROLE_CUSTOMERCARE_LOGIN"/>
        <sec:logout logout-success-url="${cas.logout.successUrl}"/>

        <!--1  Enable the following and web.xml configurations for Concurrent Access Restriction-->
        <!--<sec:custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />
        <sec:session-management session-authentication-strategy-ref="sessionControlStrategy"/>-->
        <sec:session-management invalid-session-url="/"></sec:session-management>

        <sec:custom-filter ref="casAuthenticationFilter" position="CAS_FILTER"/>
        <sec:custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <sec:custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
    </sec:http>


    <bean id="casAuthenticationFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
        <!--3 Enable the following and web.xml configurations for Concurrent Access Restriction-->
        <!--<property name="sessionAuthenticationStrategy" ref="sessionControlStrategy" />-->
        <property name="authenticationManager" ref="authenticationManager"/>
        <!--<property name="filterProcessesUrl" value="/casFailed.jspx"/>-->
        <!--<property name="filterProcessesUrl" value="/index.jspx"/>-->
        <property name="proxyGrantingTicketStorage" ref="proxyGrantingTicketStorage"/>
        <property name="proxyReceptorUrl" value="/secure/receptor"/>
    </bean>

    <bean id="casAuthenticationEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
        <property name="loginUrl" value="${cas.entryPoint.loginUrl}"/>
        <property name="serviceProperties" ref="serviceProperties"/>
    </bean>


    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider ref="casAuthenticationProvider"></sec:authentication-provider>
    </sec:authentication-manager>


    <bean id="casAuthenticationProvider"
          class="org.springframework.security.cas.authentication.CasAuthenticationProvider">

        <property name="userDetailsService" ref="userService"/>
        <property name="serviceProperties" ref="serviceProperties"/>
        <property name="ticketValidator">
            <bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
                <constructor-arg index="0" value="${cas.authentication.provider}"/>
                <property name="proxyGrantingTicketStorage" ref="proxyGrantingTicketStorage" />
            </bean>
        </property>
        <property name="key" value="an_id_for_this_auth_provider_only"/>
    </bean>


    <bean id="proxyGrantingTicketStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"/>

    <bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
        <property name="service" value="${cas.security.service}"/>
        <property name="sendRenew" value="false"/>
    </bean>

    <sec:jdbc-user-service id="userService" data-source-ref="dataSource"
                           users-by-username-query="SELECT U.username, U.password, U.enabled FROM users U where U.username=? and U.expired = 0 "
                           authorities-by-username-query="select users.username, role.name from users, role,user_group,
    group_role, module where users.username=? and user_group.user_id=users.id and group_role.group_id=user_group.group_id and
    role.id=group_role.role_id and module.name='admin' and users.expired = '0' "
            />


    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <property name="driverClass" value="${cas.db.driver}"/>
    <property name="jdbcUrl" value="${cas.db.url}"/>


    <property name="user" value="${cas.db.user}"/>
    <property name="password" value="${cas.db.password}"/>

    <!-- configuration pool via c3p0-->
    <property name="acquireIncrement" value="${cas.db.acquireIncrement}"/>
    <property name="idleConnectionTestPeriod" value="${cas.db.idleConnectionTestPeriod}"/>
    <!-- seconds -->
    <property name="maxPoolSize" value="${cas.db.maxPoolSize}"/>
    <property name="maxStatements" value="${cas.db.maxStatements}"/>
    <property name="minPoolSize" value="${cas.db.minPoolSize}"/>
    <property name="initialPoolSize" value="${cas.db.initialPoolSize}"/>
    </bean>



    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>
    <!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
    <bean id="requestSingleLogoutFilter"
          class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <constructor-arg value="${cas.logout.successUrl}"/>
        <constructor-arg>
            <bean class=
                          "org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </constructor-arg>
        <property name="filterProcessesUrl" value="/j_spring_cas_security_logout"/>
    </bean>

    <bean name="ticketValidationFilter"
          class="org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter">
        <property name="service" value="${cas.security.service}" />
        <property name="ticketValidator" ref="cas20TicketValidator"/>
    </bean>

    <bean id="cas20TicketValidator"  class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
        <constructor-arg index="0" value="${cas.authentication.provider}"/>
    </bean>

</beans>